package com.atlassian.db.replica.internal;

import com.atlassian.db.replica.*;
import com.atlassian.db.replica.internal.*;
import com.atlassian.db.replica.spi.*;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;

public class ReplicaPreparedStatement extends ReplicaStatement implements PreparedStatement {
    private final ReplicaConnectionProvider connectionProvider;
    private final String sql;
    private final Integer resultSetType;
    private final Integer resultSetConcurrency;
    private final Integer resultSetHoldability;
    private final Integer autoGeneratedKeys;
    private final String columnNames[];
    private final int columnIndexes[];

    protected ReplicaPreparedStatement(
        ReplicaConnectionProvider connectionProvider,
        String sql,
        Integer resultSetType,
        Integer resultSetConcurrency,
        Integer resultSetHoldability,
        Integer autoGeneratedKeys,
        String[] columnNames,
        int[] columnIndexes,
        ReplicaConsistency consistency
    ) {
        super(consistency, connectionProvider, resultSetType, resultSetConcurrency, resultSetHoldability);
        this.connectionProvider = connectionProvider;
        this.sql = sql;
        this.resultSetType = resultSetType;
        this.resultSetConcurrency = resultSetConcurrency;
        this.resultSetHoldability = resultSetHoldability;
        this.autoGeneratedKeys = autoGeneratedKeys;
        this.columnNames = columnNames;
        this.columnIndexes = columnIndexes;
    }

    @Override
    public ResultSet executeQuery() throws SQLException {
        final PreparedStatement statement = getReadStatement(sql);
        return SimpleMetricCollector.measure(isReadOnly(), statement::executeQuery);
    }

    @Override
    public int executeUpdate() throws SQLException {
        final PreparedStatement statement = getWriteStatement();
        final Integer returnValue = SimpleMetricCollector.measure(isReadOnly(), statement::executeUpdate);
        logMainLogSequenceNumber();
        return returnValue;
    }

    @Override
    public long executeLargeUpdate() throws SQLException {
        final PreparedStatement statement = getWriteStatement();
        final Long returnValue = SimpleMetricCollector.measure(isReadOnly(), statement::executeLargeUpdate);
        logMainLogSequenceNumber();
        return returnValue;
    }

    @Override
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        addOperation(
            new Operation<PreparedStatement, Integer>(
                (statement, args) -> {
                    try {
                        statement.setNull(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, sqlType)
            )
        );
    }

    @Override
    public void setBoolean(int parameterIndex, boolean x) {
        addOperation(
            new Operation<PreparedStatement, Boolean>(
                (statement, args) -> {
                    try {
                        statement.setBoolean(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, x)
            )
        );
    }

    @Override
    public void setByte(int parameterIndex, byte x) {
        addOperation(
            new Operation<PreparedStatement, Byte>(
                (statement, args) -> {
                    try {
                        statement.setByte(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, x)
            )
        );
    }

    @Override
    public void setShort(int parameterIndex, short x) {
        addOperation(
            new Operation<PreparedStatement, Short>(
                (statement, args) -> {
                    try {
                        statement.setShort(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, x)
            )
        );
    }

    @Override
    public void setInt(int parameterIndex, int x) {
        addOperation(
            new Operation<PreparedStatement, Integer>(
                (statement, args) -> {
                    try {
                        statement.setInt(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, x)
            )
        );
    }

    @Override
    public void setLong(int parameterIndex, long x) {
        addOperation(
            new Operation<PreparedStatement, Long>(
                (statement, args) -> {
                    try {
                        statement.setLong(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, x)
            )
        );
    }

    @Override
    public void setFloat(int parameterIndex, float x) {
        addOperation(
            new Operation<PreparedStatement, Float>(
                (statement, args) -> {
                    try {
                        statement.setFloat(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, x)
            )
        );
    }

    @Override
    public void setDouble(int parameterIndex, double x) {
        addOperation(
            new Operation<PreparedStatement, Double>(
                (statement, args) -> {
                    try {
                        statement.setDouble(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, x)
            )
        );
    }

    @Override
    public void setBigDecimal(int parameterIndex, BigDecimal x) {
        addOperation(
            new Operation<PreparedStatement, BigDecimal>(
                (statement, args) -> {
                    try {
                        statement.setBigDecimal(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, x)
            )
        );
    }

    @Override
    public void setString(int parameterIndex, String x) {
        addOperation(
            new Operation<PreparedStatement, String>(
                (statement, args) -> {
                    try {
                        statement.setString(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, x)
            )
        );
    }

    @Override
    public void setBytes(int parameterIndex, byte[] x) {
        addOperation(
            new Operation<PreparedStatement, byte[]>(
                (statement, args) -> {
                    try {
                        statement.setBytes(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, x)
            )
        );
    }

    @Override
    public void setDate(int parameterIndex, Date x) {
        addOperation(
            new Operation<PreparedStatement, Date>(
                (statement, args) -> {
                    try {
                        statement.setDate(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, x)
            )
        );
    }

    @Override
    public void setTime(int parameterIndex, Time x) {
        addOperation(
            new Operation<PreparedStatement, Time>(
                (statement, args) -> {
                    try {
                        statement.setTime(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, x)
            )
        );
    }

    @Override
    public void setTimestamp(int parameterIndex, Timestamp x) {
        addOperation(
            new Operation<PreparedStatement, Timestamp>(
                (statement, args) -> {
                    try {
                        statement.setTimestamp(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, x)
            )
        );
    }

    @Override
    public void setAsciiStream(int parameterIndex, InputStream x, int length) {
        addOperation(
            new Operation<PreparedStatement, InputStream>(
                (statement, args) -> {
                    try {
                        statement.setAsciiStream(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, x)
            )
        );
    }

    @Override
    public void setUnicodeStream(int parameterIndex, InputStream x, int length) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setBinaryStream(int parameterIndex, InputStream x, int length) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void clearParameters() {
        clearOperations();
    }

    @Override
    public void setObject(int parameterIndex, Object x, int targetSqlType) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setObject(int parameterIndex, Object x) {
        addOperation(
            new Operation<PreparedStatement, Object>(
                (statement, args) -> {
                    try {
                        statement.setObject(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, x)
            )
        );
    }

    @Override
    public boolean execute() throws SQLException {
        final PreparedStatement statement = getWriteStatement();
        final Boolean returnValue = SimpleMetricCollector.measure(isReadOnly(), statement::execute);
        logMainLogSequenceNumber();
        return returnValue;
    }

    @Override
    public void addBatch() {
        addOperation(
            new Operation<PreparedStatement, Object>(
                (statement, args) -> {
                    try {
                        statement.addBatch();
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(1, null)
            )
        );
    }

    @Override
    public void setCharacterStream(int parameterIndex, Reader reader, int length) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setRef(int parameterIndex, Ref x) {
        addOperation(
            new Operation<PreparedStatement, Ref>(
                (statement, args) -> {
                    try {
                        statement.setRef(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, x)
            )
        );
    }

    @Override
    public void setBlob(int parameterIndex, Blob x) {
        addOperation(
            new Operation<PreparedStatement, Blob>(
                (statement, args) -> {
                    try {
                        statement.setBlob(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, x)
            )
        );
    }

    @Override
    public void setClob(int parameterIndex, Clob x) {
        addOperation(
            new Operation<PreparedStatement, Clob>(
                (statement, args) -> {
                    try {
                        statement.setClob(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, x)
            )
        );
    }

    @Override
    public void setArray(int parameterIndex, Array x) {
        addOperation(
            new Operation<PreparedStatement, Array>(
                (statement, args) -> {
                    try {
                        statement.setArray(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, x)
            )
        );
    }

    @Override
    public ResultSetMetaData getMetaData() {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setDate(int parameterIndex, Date x, Calendar cal) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setTime(int parameterIndex, Time x, Calendar cal) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setNull(int parameterIndex, int sqlType, String typeName) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setURL(int parameterIndex, URL x) {
        addOperation(
            new Operation<PreparedStatement, URL>(
                (statement, args) -> {
                    try {
                        statement.setURL(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, x)
            )
        );
    }

    @Override
    public ParameterMetaData getParameterMetaData() throws SQLException {
        final PreparedStatement currentStatement = getCurrentStatement();
        if (currentStatement != null) {
            return currentStatement.getParameterMetaData();
        } else {
            return getWriteStatement().getParameterMetaData();
        }
    }

    @Override
    public void setRowId(int parameterIndex, RowId x) {
        addOperation(
            new Operation<PreparedStatement, RowId>(
                (statement, args) -> {
                    try {
                        statement.setRowId(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, x)
            )
        );
    }

    @Override
    public void setNString(int parameterIndex, String value) {
        addOperation(
            new Operation<PreparedStatement, String>(
                (statement, args) -> {
                    try {
                        statement.setNString(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, value)
            )
        );
    }

    @Override
    public void setNCharacterStream(int parameterIndex, Reader value, long length) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setNClob(int parameterIndex, NClob value) {
        addOperation(
            new Operation<PreparedStatement, NClob>(
                (statement, args) -> {
                    try {
                        statement.setNClob(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, value)
            )
        );
    }

    @Override
    public void setClob(int parameterIndex, Reader reader, long length) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setBlob(int parameterIndex, InputStream inputStream, long length) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setNClob(int parameterIndex, Reader reader, long length) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setSQLXML(int parameterIndex, SQLXML xmlObject) {
        addOperation(
            new Operation<PreparedStatement, SQLXML>(
                (statement, args) -> {
                    try {
                        statement.setSQLXML(args.getParameterIndex(), args.getValue());
                    } catch (SQLException e) {
                        throw new RuntimeException(e);
                    }
                    return null;
                },
                new Args<>(parameterIndex, xmlObject)
            )
        );
    }

    @Override
    public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setAsciiStream(int parameterIndex, InputStream x, long length) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setBinaryStream(int parameterIndex, InputStream x, long length) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setCharacterStream(int parameterIndex, Reader reader, long length) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setAsciiStream(int parameterIndex, InputStream x) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setBinaryStream(int parameterIndex, InputStream x) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setCharacterStream(int parameterIndex, Reader reader) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setNCharacterStream(int parameterIndex, Reader value) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setClob(int parameterIndex, Reader reader) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setBlob(int parameterIndex, InputStream inputStream) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public void setNClob(int parameterIndex, Reader reader) {
        throw new ReadReplicaUnsupportedOperationException();
    }

    @Override
    public PreparedStatement getWriteStatement() {
        return (PreparedStatement) super.getWriteStatement();
    }

    @Override
    public PreparedStatement getReadStatement(String sql) {
        return (PreparedStatement) super.getReadStatement(sql);
    }

    @Override
    public PreparedStatement getCurrentStatement() {
        return (PreparedStatement) super.getCurrentStatement();
    }

    public void setCurrentStatement(PreparedStatement currentStatement) {
        super.setCurrentStatement(currentStatement);
    }

    public PreparedStatement createStatement(Connection connection) throws SQLException {
        if (columnIndexes != null) {
            return connection.prepareStatement(sql, columnIndexes);
        } else if (columnNames != null) {
            return connection.prepareStatement(sql, columnNames);
        } else if (autoGeneratedKeys != null) {
            return connection.prepareStatement(sql, autoGeneratedKeys);
        } else if (resultSetType == null) {
            return connection.prepareStatement(sql);
        } else if (resultSetHoldability == null) {
            return connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
        } else {
            return connection.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
        }
    }

    public static class Builder {
        private final ReplicaConnectionProvider connectionProvider;
        private final ReplicaConsistency consistency;
        private final String sql;
        private Integer resultSetType;
        private Integer resultSetConcurrency;
        private Integer resultSetHoldability;
        private Integer autoGeneratedKeys;
        private String columnNames[];
        private int columnIndexes[];

        public Builder(
            ReplicaConnectionProvider connectionProvider,
            ReplicaConsistency consistency,
            String sql
        ) {
            this.connectionProvider = connectionProvider;
            this.consistency = consistency;
            this.sql = sql;
        }

        public ReplicaPreparedStatement.Builder resultSetType(int resultSetType) {
            this.resultSetType = resultSetType;
            return this;
        }

        public ReplicaPreparedStatement.Builder resultSetConcurrency(int resultSetConcurrency) {
            this.resultSetConcurrency = resultSetConcurrency;
            return this;
        }

        public ReplicaPreparedStatement.Builder resultSetHoldability(int resultSetHoldability) {
            this.resultSetHoldability = resultSetHoldability;
            return this;
        }

        public ReplicaPreparedStatement.Builder autoGeneratedKeys(int autoGeneratedKeys) {
            this.autoGeneratedKeys = autoGeneratedKeys;
            return this;
        }

        public ReplicaPreparedStatement.Builder columnNames(String columnNames[]) {
            this.columnNames = columnNames;
            return this;
        }

        public ReplicaPreparedStatement.Builder columnIndexes(int columnIndexes[]) {
            this.columnIndexes = columnIndexes;
            return this;
        }

        public ReplicaPreparedStatement build() {
            return new ReplicaPreparedStatement(
                connectionProvider,
                sql,
                resultSetType,
                resultSetConcurrency,
                resultSetHoldability,
                autoGeneratedKeys,
                columnNames,
                columnIndexes,
                consistency
            );
        }
    }
}
